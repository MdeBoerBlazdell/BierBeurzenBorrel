import pickle
from drink import Drink

class Borrel:
    """
    Class that runs the entire borrel. Should keep track of current drinks for sale.
    Also keeps track of balance (how much profit/loss is generated by the sale of drinks)
    """

    def __init__(self) -> None:
        self.balance = 0
        self.inventory = {}
        self.initialise_inventory()

    def initialise_inventory(self):
        """
        This will later be changed to read input from a csv file to improve usability
        """
        self.inventory[0] = Drink("Hertog Jan", 0, 80, 100, 90, 50, True)
        self.inventory[1] = Drink("Heineken", 1, 75, 90, 80, 100, True)

    def display_balance(self) -> None:
        print(f"Current balance: €{self.balance}")

    def help(self) -> None:
        print("\n An overview of supported commands (case is ignored): \n")
        print("reset -> will reset all drink prices to the initial price")
        print("balance -> will display the current balance of the borrel")
        print("stats -> will display stats of the borrel")

    def print_valid_stock(self) -> None:
        for value in self.inventory.values():
            print(value)

    def update_prices(self, drink: Drink, amount: int):
        """
        Updates all prices of the drinks based on the latest sale.
        Parameter drink (Drink) is the drink that is sold, hence its price increases.
        All other prices must decrease, as they are not sold in the latest transaction
        """
        price_change = 0.01
        for value in self.inventory.values():
            if value == drink:
                value.modify_price(True, price_change, amount)
            else:
                value.modify_price(False, price_change, 0)

    def sell_drink(self,drink: Drink, amount: int):
        """
        Function used to sell a drink. Used to show the sell price to
        the user (i.e. how much somebody needs to pay for their order),
        and updates the borrel balance
        """
        sell_price = (drink.current_price * amount) / 100
        profit = (drink.current_price - drink.starting_price) * amount
        self.balance += profit
        print(f"\nSold for €{drink.current_price/100:.2f} per bottle")
        print(f"Sell price is €{sell_price:.2f}")
        print("\n --------------------------- \n")

    def reset(self) -> None:
        """
        Resets all drink prices in the inventory to their default value, 
        which is stored in the Drink object associated with the drink
        """
        for value in self.inventory.values():
            value.reset()

    def quit(self) -> None:
        """
        Used to properly shutdown the borrel at the end. Useful to determine how much of each drink has been sold.
        """
        with open("finalInventory.pkl", "wb") as f:
            pickle.dump(self.inventory, f)
        print("Final results of drinks sold written to file")

    def run_borrel(self) -> None:
        """
        Main control loop that takes care of running the borrel. Includes functionality
        to parse input (orders) and update the inventory based on the input.
        """
        self.initialise_inventory()
        # Keep track of a boolean flag that indicates when the program should be terminated
        running = True

        while running:
            id, running = self.safe_parse("ID of the drink sold: >> ")
            if running == False:
                return

            # Continue until a valid ID is entered. ID entered must be associated with a drink
            while id not in self.inventory:
                print("That input is not valid, please use a valid ID")
                self.print_valid_stock()
                id, running = self.safe_parse("ID of the drink sold: >> ")
                if running == False:
                    return
            drink = self.inventory[id]

            amount, running = self.safe_parse("Number of drinks sold: >> ")
            if running == False:
                return
            
            # Continue until user enters a valid amount of drinks to be ordered
            while drink.can_sell_amount(amount) == False: # is possible to sell 0 drinks
                print("You can not sell this amount of drinks")
                print(f"You can sell at most {drink.nr_drinks} bottles")
                amount, running = self.safe_parse("Number of drinks sold: >> ")
                if running == False:
                    return

            self.sell_drink(drink, amount)
            self.update_prices(drink, amount)
            self.print_valid_stock()

    def safe_parse(self, prompt: str) -> tuple[int, bool]:
        """
        Used to make sure that we can properly parse inputs to integers.
        Additionally, performs checks for other possible commands and calls 
        the functions associated with these commands when needed. 
        Returns the parsed result when appropiate, along with a flag that indicates
        whether the program needs to continue running.
        """
        result = input(prompt)
        if result == "quit":
            return self.quit(), False
        while result.isdigit() == False:
            print("Input must be an integer \n")
            result = input(prompt)
        return int(result), True


if __name__ == "__main__":

    b = Borrel()
    b.run_borrel()
